(ns porter-stemmer.test.core
  (:use [porter-stemmer.core])
  (:use [clojure.test]))

(defn step1a-str [word] (apply str (step1a word)))
(defn step1b-str [word] (apply str (step1b word)))
(defn step1c-str [word] (apply str (step1c word)))
(defn step2-str [word] (apply str (step2 word)))
(defn step3-str [word] (apply str (step3 word)))
(defn step4-str [word] (apply str (step4 word)))
(defn step5-str [word] (apply str (step5 word)))

(deftest step1a-test
  (is (= "caress" (step1a-str "caresses")))
  (is (= "poni"   (step1a-str "ponies")))
  (is (= "ti"     (step1a-str "ties")))
  (is (= "caress" (step1a-str "caress")))
  (is (= "cat"    (step1a-str "cat"))))

(deftest step1b-test
  (is (= "feed"      (step1b-str "feed")))
  (is (= "agree"     (step1b-str "agreed")))
  (is (= "plaster"   (step1b-str "plastered")))
  (is (= "bled"      (step1b-str "bled")))
  (is (= "motor"     (step1b-str "motoring")))
  (is (= "sing"      (step1b-str "sing")))
  (is (= "conflate"  (step1b-str "conflated")))
  (is (= "trouble"   (step1b-str "troubled")))
  (is (= "size"      (step1b-str "sized")))
  (is (= "hop"       (step1b-str "hopping")))
  (is (= "tan"       (step1b-str "tanned")))
  (is (= "fall"      (step1b-str "falling")))
  (is (= "hiss"      (step1b-str "hissing")))
  (is (= "fizz"      (step1b-str "fizzed")))
  (is (= "fail"      (step1b-str "failing")))
  (is (= "file"      (step1b-str "filing"))))

(deftest step1c-test
  (is (= "happi"  (step1c-str "happy")))
  (is (= "sky"    (step1c-str "sky"))))

(deftest step2-test
  (is (= "relate"      (step2-str "relational")))
  (is (= "condition"   (step2-str "conditional")))
  (is (= "rational"    (step2-str "rational")))
  (is (= "valence"     (step2-str "valenci")))
  (is (= "hesitance"   (step2-str "hesitanci")))
  (is (= "digitize"    (step2-str "digitizer")))
  (is (= "conformable" (step2-str "conformabli")))
  (is (= "radical"     (step2-str "radicalli")))
  (is (= "different"   (step2-str "differentli")))
  (is (= "vile"        (step2-str "vileli")))
  (is (= "analogous"   (step2-str "analogousli")))
  (is (= "vietnamize"  (step2-str "vietnamization")))
  (is (= "predicate"   (step2-str "predication")))
  (is (= "operate"     (step2-str "operator")))
  (is (= "feudal"      (step2-str "feudalism")))
  (is (= "decisive"    (step2-str "decisiveness")))
  (is (= "hopeful"     (step2-str "hopefulness")))
  (is (= "callous"     (step2-str "callousness")))
  (is (= "formal"      (step2-str "formaliti")))
  (is (= "sensitive"   (step2-str "sensitiviti")))
  (is (= "sensible"    (step2-str "sensibiliti"))))

(deftest step3-test
  (is (= "triplic"     (step3-str "triplicative")))
  (is (= "form"        (step3-str "formative")))
  (is (= "formal"      (step3-str "formalize")))
  (is (= "electric"    (step3-str "electriciti")))
  (is (= "electric"    (step3-str "electrical")))
  (is (= "hope"        (step3-str "hopeful")))
  (is (= "good"        (step3-str "goodness"))))

(deftest step4-test
  (is (= "reviv"    (step4-str "revival")))
  (is (= "allow"    (step4-str "allowance")))
  (is (= "infer"    (step4-str "inference")))
  (is (= "airlin"   (step4-str "airliner")))
  (is (= "gyroscop" (step4-str "gyroscopic")))
  (is (= "adjust"   (step4-str "adjustable")))
  (is (= "defens"   (step4-str "defensible")))
  (is (= "irrit"    (step4-str "irritant")))
  (is (= "replac"   (step4-str "replacement")))
  (is (= "adjust"   (step4-str "adjustment")))
  (is (= "depend"   (step4-str "dependent")))
  (is (= "adopt"    (step4-str "adoption")))
  (is (= "homolog"  (step4-str "homologou")))
  (is (= "commun"   (step4-str "communism")))
  (is (= "activ"    (step4-str "activate")))
  (is (= "angular"  (step4-str "angulariti")))
  (is (= "homolog"  (step4-str "homologous")))
  (is (= "effect"   (step4-str "effective")))
  (is (= "bowdler"  (step4-str "bowdlerize"))))

(deftest step5-test
  (is (= "probat"  (step5-str "probate")))
  (is (= "rate"    (step5-str "rate")))
  (is (= "ceas"    (step5-str "cease")))
  (is (= "control" (step5-str "control")))
  (is (= "roll"    (step5-str "roll"))))
